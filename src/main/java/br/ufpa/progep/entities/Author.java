package br.ufpa.progep.entities;

//import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.validation.constraints.NotEmpty;

import org.hibernate.validator.constraints.Length;

/*
 * This class represents the way that the author object will persist in the database.
 * The NamedQuery annotation is used to create a query in SQL to find all authors
 * that are persisting in the database.
 * 
 * The Entity annotation is means that this class will be an entity in the database,
 * and this entity will have all the attributes that this class has.
 * 
 * The Table annotation means that will be created a table on database that will have
 * the name 'author' and all the attributes in this class.
 * */
@NamedQuery(name = "findAllAuthors", query = "SELECT author FROM Author author")
@Entity
@Table(name = "author")
public class Author /*implements Serializable*/ {
	//private static final long serialVersionUID = 6820380987603036011L;

	/*
	 * The Id annotation means that this attribute will be the element
	 * primary key.
	 * 
	 * The GeneratedValue annotation means that this attribute will be
	 * automatic generated by the server, using the strategy IDENTITY,
	 * more appropriated for the MySQL server.
	 * */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;
	
	/*
	 * The column annotation means that this attribute will be a table column.
	 * and will have the following constraints: It's max length is 35 characters
	 * and it cannot be null.
	 * 
	 * The Length and NotEmpty annotations are validation annotations to flag the user
	 * of what constraint is not being satisfied.
	 * */
	@Column(length = 35, nullable = false)
	@Length(max = 35, message = "The author's name can't contain more than {max} characters.")
	@NotEmpty(message = "The author's name can't be null.")
	private String nome;

	/*
	 * Getters, Setters, Equals and Hash Code methods.
	 * */
	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	/*public static long getSerialversionuid() {
		return serialVersionUID;
	}*/

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Author other = (Author) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
}
